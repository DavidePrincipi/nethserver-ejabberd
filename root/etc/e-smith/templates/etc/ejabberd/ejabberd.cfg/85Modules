{

    $OUT =<<'HERE';
% Used modules:
{modules,
 [
  {mod_roster,     []},
  {mod_shared_roster,[]},
  {mod_http_bind,  []},
  {mod_privacy,    []},
  {mod_adhoc,      []},
  {mod_configure,  []}, % Depends on mod_adhoc
  {mod_configure2, []},
  {mod_disco,      []},
  {mod_stats,      []},
  {mod_vcard,      []},
  {mod_caps,	   []},
  {mod_offline,    []},
  {mod_announce,   [{access, announce}]}, % Depends on mod_adhoc
  {mod_private,    []},
  {mod_irc,        []},
% Default options for mod_muc:
%   host: "conference." ++ ?MYNAME
%   access: all
%   access_create: all
%   access_admin: none (only room creator has owner privileges)
  {mod_muc,        [{access, muc}, {access_create, muc}, {access_admin, muc_admin}]},
  {mod_muc_log,    []},
  {mod_shared_roster, []},
  {mod_pubsub,     [{access_createnode, pubsub_createnode}]},
  {mod_time,       []},
  {mod_last,       []},
%  {mod_xmlrpc,[{port, 4560},{timeout, 5000}]},
  {mod_version,    []},
HERE
    $OUT .= '  {mod_admin_extra,    []},';
    $OUT .= "\n";
    $OUT .= '  {mod_echo,       [{host, "echo.';
    $OUT .= ${DomainName};
    $OUT .= '"}]},';
    $OUT .= "\n";

    use NethServer::SSSD;
    my $sssd = NethServer::SSSD->new();

my $ldap_host = $sssd->host();
my $ldap_port = $sssd->port();
my $ldap_encrypt = 'none';
my $ldap_rootdn = $sssd->bindDN();
# Escape backslash
$ldap_rootdn =~ s/\\/\\\\/g;
my $ldap_password_escaped = $sssd->bindPassword(); $ldap_password_escaped =~ s/\"/\\"/g;

if($sssd->ldapURI =~ /^ldaps/) {
    $ldap_encrypt = 'tls';
}

$OUT.= "  {mod_shared_roster_ldap,[\n";
$OUT.= "     {ldap_servers, [\"$ldap_host\"]},\n";
$OUT.= "     {ldap_port, $ldap_port},\n";
$OUT.= "     {ldap_encrypt, $ldap_encrypt},\n";
$OUT.= "     {ldap_base, \"".$sssd->baseDN()."\"},\n";

if($sssd->isAD() || $sssd->bindDN()) {
    $OUT .= "     {ldap_rootdn, \"$ldap_rootdn\"},\n";
    $OUT .= "     {ldap_password, \"$ldap_password_escaped\"},\n";
}

if ($sssd->isAD()) {
#
# Groups are not supported, also user names are not available
#
$OUT .= <<HERE
     {ldap_groupattr, "sAMAccountName"},
     {ldap_groupdesc, "cn"},
     {ldap_memberattr, "sAMAccountName"},
     {ldap_memberattr_format, "%u"},
     {ldap_useruid, "sAMAccountName"},
     {ldap_userdesc, "displayName"},
     {ldap_rfilter, "(objectClass=group)"},
     {ldap_gfilter, "(objectClass=user)"},
     {ldap_ufilter, "(&(objectClass=user)(sAMAccountName=%u))"},
     {ldap_filter, "(!(objectClass=computer))"}
HERE
} else {
$OUT .= <<HERE
     {ldap_groupattr, "cn"},
     {ldap_groupdesc,"o"},
     {ldap_useruid, "uid"},
     {ldap_ufilter, "(uid=%u)"},
     {ldap_rfilter, "(objectClass=posixAccount)"},
     {ldap_memberattr,"uid"},
     {ldap_memberattr_format,"%u"}
HERE
}

$OUT.= "  ]}\n";
$OUT .= ' ]}.';

}
